!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CFrameBufferObject	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CFrameBufferObject::CFrameBufferObject(unsigned int width, unsigned int height, $/;"	f	class:CFrameBufferObject
CheckBackBuffer	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckBackBuffer::CheckBackBuffer(unsigned int width, unsigned int height, unsigned int Bpp, bool bUseOpenGL) : $/;"	f	class:CheckBackBuffer
CheckFBO	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckFBO::CheckFBO(unsigned int width, unsigned int height, unsigned int Bpp) :$/;"	f	class:CheckFBO
CheckFBO	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckFBO::CheckFBO(unsigned int width, unsigned int height, unsigned int Bpp, CFrameBufferObject *pFrameBufferObject) :$/;"	f	class:CheckFBO
CheckRender	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckRender::CheckRender(unsigned int width, unsigned int height, unsigned int Bpp,$/;"	f	class:CheckRender
CmdArgReader	/Developer/GPU Computing/shared/src/cmd_arg_reader.cpp	/^CmdArgReader::CmdArgReader() :$/;"	f	class:CmdArgReader
MIN_EPSILON_ERROR	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^#define MIN_EPSILON_ERROR /;"	d	file:
NEW_FBO_CODE	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^#define NEW_FBO_CODE /;"	d	file:
PGMHeaderSize	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^const unsigned int PGMHeaderSize = 0x40;$/;"	v
PGMvsPGM	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckRender::PGMvsPGM( const char *src_file, const char *ref_file, const float epsilon, const float threshold )$/;"	f	class:CheckRender
PPMvsPPM	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckRender::PPMvsPPM( const char *src_file, const char *ref_file, const float epsilon, const float threshold )$/;"	f	class:CheckRender
StopWatch	/Developer/GPU Computing/shared/src/stopwatch.cpp	/^namespace StopWatch $/;"	n	file:
StopWatchLinux	/Developer/GPU Computing/shared/src/stopwatch_linux.cpp	/^StopWatchLinux::StopWatchLinux() :$/;"	f	class:StopWatchLinux
allocateMemory	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckRender::allocateMemory( unsigned int width, unsigned int height, unsigned int Bpp,$/;"	f	class:CheckRender
attachTexture	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CFrameBufferObject::attachTexture( GLenum texTarget, GLuint texId, $/;"	f	class:CFrameBufferObject
bindReadback	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^void CheckRender::bindReadback() {$/;"	f	class:CheckRender
cLogFilePathAndName	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^char* cLogFilePathAndName = NULL;$/;"	v
checkStatus	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CFrameBufferObject::checkStatus(const char *zfile, int line, bool silent)$/;"	f	class:CFrameBufferObject
checkStatus	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CheckBackBuffer::checkStatus(const char *zfile, int line, bool silent)$/;"	f	class:CheckBackBuffer
checkStatus	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CheckFBO::checkStatus(const char *zfile, int line, bool silent)$/;"	f	class:CheckFBO
compareBin2BinFloat	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CheckRender::compareBin2BinFloat(const char *src_file, const char *ref_file, unsigned int nelements, const float epsilon, const float threshold)$/;"	f	class:CheckRender
compareBin2BinUint	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CheckRender::compareBin2BinUint(const char *src_file, const char *ref_file, unsigned int nelements, const float epsilon, const float threshold)$/;"	f	class:CheckRender
compareData	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^compareData( const T* reference, const T* data, const unsigned int len, $/;"	f
compareDataAsFloat	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^compareDataAsFloat( const T* reference, const T* data, const unsigned int len, $/;"	f
compareDataAsFloatThreshold	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^compareDataAsFloatThreshold( const T* reference, const T* data, const unsigned int len, $/;"	f
create	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CFrameBufferObject::create( GLuint width, GLuint height, fboConfig &config, fboData &data) $/;"	f	class:CFrameBufferObject
create	/Developer/GPU Computing/shared/src/stopwatch.cpp	/^    create() $/;"	f	namespace:StopWatch
createArgsMaps	/Developer/GPU Computing/shared/src/cmd_arg_reader.cpp	/^CmdArgReader::createArgsMaps( const int argc, const char** argv) {$/;"	f	class:CmdArgReader
createCSAA	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CFrameBufferObject::createCSAA( GLuint width, GLuint height, fboConfig *p_config, fboData *p_data )$/;"	f	class:CFrameBufferObject
createMSAA	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CFrameBufferObject::createMSAA( GLuint width, GLuint height, fboConfig *p_config, fboData *p_data )$/;"	f	class:CFrameBufferObject
createTexture	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CFrameBufferObject::createTexture(GLenum target, int w, int h, GLint internalformat, GLenum format)$/;"	f	class:CFrameBufferObject
cutDestroyThread	/Developer/GPU Computing/shared/src/multithreading.cpp	/^    void cutDestroyThread(CUTThread thread){$/;"	f
cutEndThread	/Developer/GPU Computing/shared/src/multithreading.cpp	/^    void cutEndThread(CUTThread thread){$/;"	f
cutStartThread	/Developer/GPU Computing/shared/src/multithreading.cpp	/^    CUTThread cutStartThread(CUT_THREADROUTINE func, void * data){$/;"	f
cutStartThread	/Developer/GPU Computing/shared/src/multithreading.cpp	/^    CUTThread cutStartThread(CUT_THREADROUTINE func, void *data){$/;"	f
cutWaitForThreads	/Developer/GPU Computing/shared/src/multithreading.cpp	/^    void cutWaitForThreads(const CUTThread * threads, int num){$/;"	f
destroy	/Developer/GPU Computing/shared/src/stopwatch.cpp	/^    destroy( const unsigned int& name) $/;"	f	namespace:StopWatch
dumpBin	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^void CheckRender::dumpBin(void *data, unsigned int bytes, const char *filename) $/;"	f	class:CheckRender
freeResources	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CFrameBufferObject::freeResources()$/;"	f	class:CFrameBufferObject
get	/Developer/GPU Computing/shared/src/stopwatch.cpp	/^    get( const unsigned int& name) $/;"	f	namespace:StopWatch
init	/Developer/GPU Computing/shared/src/cmd_arg_reader.cpp	/^CmdArgReader::init( const int argc, const char** argv) $/;"	f	class:CmdArgReader
initialize	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CFrameBufferObject::initialize(unsigned int width, unsigned int height, fboConfig & rConfigFBO, fboData & rActiveFBO)$/;"	f	class:CFrameBufferObject
loadPPM	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL loadPPM(const char* file, unsigned char** data, $/;"	f
nameToIndex	/Developer/GPU Computing/shared/src/stopwatch.cpp	/^    nameToIndex( const unsigned int& name) $/;"	f	namespace:__anon2
oclDeleteMemObjs	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^void oclDeleteMemObjs(cl_mem* cmMemObjs, int iNumObjs)$/;"	f
oclErrorString	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^const char* oclErrorString(cl_int error)$/;"	f
oclGetDev	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^cl_device_id oclGetDev(cl_context cxGPUContext, unsigned int nr)$/;"	f
oclGetDevCap	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^int oclGetDevCap(cl_device_id device)$/;"	f
oclGetFirstDev	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^cl_device_id oclGetFirstDev(cl_context cxGPUContext)$/;"	f
oclGetMaxFlopsDev	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^cl_device_id oclGetMaxFlopsDev(cl_context cxGPUContext)$/;"	f
oclGetPlatformID	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^cl_int oclGetPlatformID(cl_platform_id* clSelectedPlatformID)$/;"	f
oclGetProgBinary	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^void oclGetProgBinary( cl_program cpProgram, cl_device_id cdDevice, char** binary, size_t* length)$/;"	f
oclImageFormatString	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^const char* oclImageFormatString(cl_uint uiImageFormat)$/;"	f
oclLoadProgSource	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^char* oclLoadProgSource(const char* cFilename, const char* cPreamble, size_t* szFinalLength)$/;"	f
oclLogBuildInfo	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^void oclLogBuildInfo(cl_program cpProgram, cl_device_id cdDevice)$/;"	f
oclLogPtx	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^void oclLogPtx(cl_program cpProgram, cl_device_id cdDevice, const char* cPtxFileName)$/;"	f
oclPrintDevInfo	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^void oclPrintDevInfo(int iLogMode, cl_device_id device)$/;"	f
oclPrintDevName	/Developer/GPU Computing/OpenCL/common/src/oclUtils.cpp	/^void oclPrintDevName(int iLogMode, cl_device_id device)$/;"	f
rargc	/Developer/GPU Computing/shared/src/cmd_arg_reader.cpp	/^\/*static*\/ int CmdArgReader::rargc;$/;"	m	class:CmdArgReader	file:
rargv	/Developer/GPU Computing/shared/src/cmd_arg_reader.cpp	/^\/*static*\/ char** CmdArgReader::rargv;$/;"	m	class:CmdArgReader	file:
readback	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CheckBackBuffer::readback( GLuint width, GLuint height )$/;"	f	class:CheckBackBuffer
readback	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CheckBackBuffer::readback( GLuint width, GLuint height, GLuint bufObject )$/;"	f	class:CheckBackBuffer
readback	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CheckBackBuffer::readback( GLuint width, GLuint height, unsigned char *memBuf )$/;"	f	class:CheckBackBuffer
readback	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CheckFBO::readback( GLuint width, GLuint height )$/;"	f	class:CheckFBO
readback	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CheckFBO::readback( GLuint width, GLuint height, GLuint bufObject )$/;"	f	class:CheckFBO
readback	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^bool CheckFBO::readback( GLuint width, GLuint height, unsigned char *memBuf )$/;"	f	class:CheckFBO
renderQuad	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^void CFrameBufferObject::renderQuad(int width, int height, GLenum eTarget)$/;"	f	class:CFrameBufferObject
savePGM	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckRender::savePGM(  const char *zfilename, bool bInvert, void **ppReadBuf )$/;"	f	class:CheckRender
savePPM	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckRender::savePPM(  const char *zfilename, bool bInvert, void **ppReadBuf )$/;"	f	class:CheckRender
savePPM	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL savePPM( const char* file, unsigned char *data, $/;"	f
shrCheckCmdLineFlag	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrCheckCmdLineFlag( const int argc, const char** argv, const char* flag_name) $/;"	f
shrCompareL2fe	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrCompareL2fe( const float* reference, const float* data,$/;"	f
shrComparePGM	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrComparePGM( const char *src_file, const char *ref_file, const float epsilon, const float threshold)$/;"	f
shrComparePPM	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrComparePPM( const char *src_file, const char *ref_file, const float epsilon, const float threshold)$/;"	f
shrComparef	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrComparef( const float* reference, const float* data,$/;"	f
shrComparefe	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrComparefe( const float* reference, const float* data,$/;"	f
shrComparefet	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrComparefet( const float* reference, const float* data,$/;"	f
shrComparei	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrComparei( const int* reference, const int* data,$/;"	f
shrCompareub	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrCompareub( const unsigned char* reference, const unsigned char* data,$/;"	f
shrCompareube	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrCompareube( const unsigned char* reference, const unsigned char* data,$/;"	f
shrCompareubt	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrCompareubt( const unsigned char* reference, const unsigned char* data,$/;"	f
shrCompareuit	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrCompareuit( const unsigned int* reference, const unsigned int* data,$/;"	f
shrDeltaT	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^double shrDeltaT(int iCounterID = 0)$/;"	f
shrFillArray	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^void shrFillArray(float* pfData, int iSize)$/;"	f
shrFindFilePath	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^char* shrFindFilePath(const char* filename, const char* executable_path) $/;"	f
shrFree	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^void shrFree(void* ptr) $/;"	f
shrGetCmdLineArgumentf	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrGetCmdLineArgumentf( const int argc, const char** argv, $/;"	f
shrGetCmdLineArgumenti	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrGetCmdLineArgumenti( const int argc, const char** argv, $/;"	f
shrGetCmdLineArgumentstr	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrGetCmdLineArgumentstr( const int argc, const char** argv, $/;"	f
shrGetCmdLineArgumentu	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrGetCmdLineArgumentu( const int argc, const char** argv, $/;"	f
shrLoadPGMub	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrLoadPGMub( const char* file, unsigned char** data, $/;"	f
shrLoadPPM4ub	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrLoadPPM4ub( const char* file, unsigned char** OutData, $/;"	f
shrLoadRawFile	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^unsigned char* shrLoadRawFile(const char* filename, size_t size)$/;"	f
shrLog	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^int shrLog(const char* cFormatString = "", ...)$/;"	f
shrLogEx	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^int shrLogEx(int iLogMode = LOGCONSOLE, int iErrNum = 0, const char* cFormatString = "", ...)$/;"	f
shrLogV	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^static int shrLogV(int iLogMode, int iErrNum, const char* cFormatString, va_list vaArgList)$/;"	f	file:
shrPrintArray	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^void shrPrintArray(float* pfData, int iSize)$/;"	f
shrReadFile	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrReadFile( const char* filename, T** data, unsigned int* len, bool verbose) $/;"	f
shrReadFileb	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrReadFileb( const char* filename, char** data, unsigned int* len, bool verbose) $/;"	f
shrReadFiled	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrReadFiled( const char* filename, double** data, unsigned int* len, bool verbose) $/;"	f
shrReadFilef	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrReadFilef( const char* filename, float** data, unsigned int* len, bool verbose) $/;"	f
shrReadFilei	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrReadFilei( const char* filename, int** data, unsigned int* len, bool verbose) $/;"	f
shrReadFileub	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrReadFileub( const char* filename, unsigned char** data, unsigned int* len, bool verbose) $/;"	f
shrReadFileui	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrReadFileui( const char* filename, unsigned int** data, unsigned int* len, bool verbose) $/;"	f
shrRoundUp	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^size_t shrRoundUp(int group_size, int global_size) $/;"	f
shrSavePGMub	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrSavePGMub( const char* file, unsigned char *data, $/;"	f
shrSavePPM4ub	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrSavePPM4ub( const char* file, unsigned char *data, $/;"	f
shrSetLogFileName	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^void shrSetLogFileName (const char* cOverRideName)$/;"	f
shrWriteFile	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrWriteFile( const char* filename, const T* data, unsigned int len,$/;"	f
shrWriteFileb	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrWriteFileb( const char* filename, const char* data, unsigned int len, bool verbose) $/;"	f
shrWriteFileb	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrWriteFileb( const char* filename,const unsigned char* data,unsigned int len, bool verbose)$/;"	f
shrWriteFiled	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrWriteFiled( const char* filename, const double* data, unsigned int len,$/;"	f
shrWriteFilef	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrWriteFilef( const char* filename, const float* data, unsigned int len,$/;"	f
shrWriteFilei	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrWriteFilei( const char* filename, const int* data, unsigned int len, bool verbose) $/;"	f
shrWriteFileub	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrWriteFileub( const char* filename, const unsigned char* data, $/;"	f
shrWriteFileui	/Developer/GPU Computing/shared/src/shrUtils.cpp	/^shrBOOL shrWriteFileui( const char* filename,const unsigned int* data,unsigned int len, bool verbose)$/;"	f
swatches	/Developer/GPU Computing/shared/src/stopwatch.cpp	/^StopWatchBase<OSPolicy>::    swatches;$/;"	m	class:StopWatchBase	file:
swatches	/Developer/GPU Computing/shared/src/stopwatch.cpp	/^\/*static*\/ std::vector< StopWatchC* > StopWatchC::swatches;$/;"	m	class:StopWatchC	file:
swatches_size_type	/Developer/GPU Computing/shared/src/stopwatch.cpp	/^    typedef  std::vector< StopWatchC* >::size_type  swatches_size_type;  $/;"	t	namespace:__anon2	file:
unbindReadback	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^void CheckRender::unbindReadback() {$/;"	f	class:CheckRender
~CFrameBufferObject	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CFrameBufferObject::~CFrameBufferObject()$/;"	f	class:CFrameBufferObject
~CheckBackBuffer	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckBackBuffer::~CheckBackBuffer()$/;"	f	class:CheckBackBuffer
~CheckFBO	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckFBO::~CheckFBO() $/;"	f	class:CheckFBO
~CheckRender	/Developer/GPU Computing/shared/src/rendercheckGL.cpp	/^CheckRender::~CheckRender() $/;"	f	class:CheckRender
~CmdArgReader	/Developer/GPU Computing/shared/src/cmd_arg_reader.cpp	/^CmdArgReader::~CmdArgReader() $/;"	f	class:CmdArgReader
~StopWatchLinux	/Developer/GPU Computing/shared/src/stopwatch_linux.cpp	/^StopWatchLinux::~StopWatchLinux() { }$/;"	f	class:StopWatchLinux
